// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// backscatter //
// ----------- //

#define backscatter_wrap_target 0
#define backscatter_wrap 16
#define backscatter_pio_version 0

static const uint16_t backscatter_program_instructions[] = {
            //     .wrap_target
    0xe001, //  0: set    pins, 1
    0x60c0, //  1: out    isr, 32
    0x6040, //  2: out    y, 32
    0x6021, //  3: out    x, 1
    0x002b, //  4: jmp    !x, 11
    0xa022, //  5: mov    x, y
    0xe801, //  6: set    pins, 1                [8]
    0xe700, //  7: set    pins, 0                [7]
    0x0046, //  8: jmp    x--, 6
    0xe301, //  9: set    pins, 1                [3]
    0x0003, // 10: jmp    3
    0xa026, // 11: mov    x, isr
    0xe901, // 12: set    pins, 1                [9]
    0xe800, // 13: set    pins, 0                [8]
    0x004c, // 14: jmp    x--, 12
    0xe501, // 15: set    pins, 1                [5]
    0x0003, // 16: jmp    3
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program backscatter_program = {
    .instructions = backscatter_program_instructions,
    .length = 17,
    .origin = -1,
    .pio_version = backscatter_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config backscatter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + backscatter_wrap_target, offset + backscatter_wrap);
    return c;
}

#include "pico/stdlib.h"
#include "hardware/clocks.h"
#define min(x, y) (((x) < (y)) ? (x) : (y))
#define PIO_BAUDRATE 100000
#define PIO_CENTER_OFFSET 6597222
#define PIO_DEVIATION 347222
#define PIO_MIN_RX_BW 794444
static inline void backscatter_program_init(PIO pio, uint sm, uint offset, uint pin1){
   pio_gpio_init(pio, pin1);
   pio_sm_set_consecutive_pindirs(pio, sm, pin1, 1, true);
   pio_sm_config c = backscatter_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin1, 1);
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // We only need TX, so get an 8-deep FIFO (join RX and TX FIFO)
   sm_config_set_out_shift(&c, false, true, 32);  // OUT shifts to left (MSB first), autopull after every 32 bit
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
   pio_sm_put_blocking(pio, sm, 61); // floor((b - w) / d0) - 1 = floor((1250 - 4)/20) - 1   // -1 is requried since JMP 0-- is still true
   pio_sm_put_blocking(pio, sm, 68); // floor((b - w) / d1) - 1 = floor((1250 - 4)/18) - 1   // -1 is required since JMP 0-- is still true
}
static inline void backscatter_send(PIO pio, uint sm, uint32_t *message, uint32_t len) {
    for(uint32_t i = 0; i < len; i++){
        pio_sm_put_blocking(pio, sm, message[i]); // set pin back to low
    }
    sleep_ms(1); // wait for transmission to finish
}

#endif

